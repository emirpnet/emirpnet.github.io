var searchIndex = {};
searchIndex["sdl2sketch"] = {"doc":"SDL2Sketch tries to simplify the use of rust-sdl2 by following the style of the p5.js API. It does not try to be a complete game engine, but just wants to make it as easy as possible to create visual applications in Rust without much boilerplate code. Code examples and the source code of SDL2Sketch can be found on its GitHub page.","items":[[3,"Sketch","sdl2sketch","This struct contains the necessary SDL2 subsystem objects and provides most of the API.",null,null],[4,"RectMode","","options for the interpretation of the parameters given to rect()",null,null],[13,"CORNER","","CORNER (default): Coordinates of the upper left corner (x, y), width (w) and height (h)",0,null],[13,"CORNERS","","CORNERS: Coordinates of the upper left corner (x, y) and the lower right corner (w, h)",0,null],[13,"CENTER","","CENTER: Coordinates of the center (x, y), width (w) and height (h)",0,null],[13,"RADIUS","","RADIUS: Coordinates of the center (x, y), half width (w) and half height (h)",0,null],[5,"run","","starts the sketch and runs the main loop",null,{"inputs":[{"name":"sketch"},{"name":"t"}],"output":null}],[5,"load_image","","loads an image from file (PNG or JPG)",null,{"inputs":[{"name":"path"}],"output":{"name":"image"}}],[0,"utils","","module containing utility functions",null,null],[5,"constrain","sdl2sketch::utils","utility function to constrain a value between low and high",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"map","","utility function to map a Float from one value range to another",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"norm","","utility function to map a Float from one value range to [0,1]",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"hsv_to_rgb","","utility function to convert a HSV color value to RGB (EXPERIMENTAL)",null,null],[5,"rgb_to_hsv","","utility function to convert a RGB color value to HSV (EXPERIMENTAL)",null,null],[8,"MainLoopMethods","sdl2sketch","This trait must be implemented by the state struct of the application and provided to run().",null,null],[11,"setup","","called once before entering the main loop",1,{"inputs":[{"name":"self"},{"name":"sketch"}],"output":null}],[11,"update","","called every frame inside the main loop before draw()",1,{"inputs":[{"name":"self"},{"name":"sketch"}],"output":null}],[11,"draw","","called every frame inside the main loop",1,{"inputs":[{"name":"self"},{"name":"sketch"}],"output":null}],[11,"key_pressed","","called inside the main loop on a KeyDown event ",1,{"inputs":[{"name":"self"},{"name":"sketch"},{"name":"keycode"}],"output":null}],[11,"key_released","","called inside the main loop on a KeyUp event ",1,{"inputs":[{"name":"self"},{"name":"sketch"},{"name":"keycode"}],"output":null}],[11,"mouse_moved","","called inside the main loop on a MouseMotion event, if no MouseButton is pressed",1,{"inputs":[{"name":"self"},{"name":"sketch"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"mouse_dragged","","called inside the main loop on a MouseMotion event, if a MouseButton is pressed",1,{"inputs":[{"name":"self"},{"name":"sketch"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"mouse_pressed","","called inside the main loop on a MouseButtonDown event",1,{"inputs":[{"name":"self"},{"name":"sketch"},{"name":"mousebutton"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"mouse_released","","called inside the main loop on a MouseButtonUp event",1,{"inputs":[{"name":"self"},{"name":"sketch"},{"name":"mousebutton"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"new","","create a new sketch",2,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"str"}],"output":{"name":"self"}}],[11,"width","","returns the width of the sketch in pixels",2,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"height","","returns the height of the sketch in pixels",2,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_framerate","","returns the current framerate in frames per second",2,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_framerate","","sets the max. framerate in frames per second",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"no_loop","","stops and restarts the main loop",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"quit","","exits the main loop",2,{"inputs":[{"name":"self"}],"output":null}],[11,"background","","clears the sketch by filling the whole sketch with the provided color",2,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"key_is_down","","checks if the key with the provided keycode is currently pressed",2,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"bool"}}],[11,"mouse_pos","","returns current x position of the mouse in pixel coordinates",2,null],[11,"mouse_is_pressed","","checks if any mouse button is currently pressed",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stroke","","After calling this function primitives will be drawn with an outline in the provided color.",2,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"no_stroke","","After calling this function primitives will be drawn without outline.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fill","","After calling this function primitives will be drawn filled in the provided color.",2,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"no_fill","","After calling this function primitives will be drawn without fill.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"smooth","","After calling this function primitives will be drawn with anti-aliasing. (nicer outline but slower)",2,{"inputs":[{"name":"self"}],"output":null}],[11,"no_smooth","","After calling this function primitives will be drawn without anti-aliasing. (rugged outline but faster)",2,{"inputs":[{"name":"self"}],"output":null}],[11,"rect_mode","","After calling this function the parameters of all subsequent calls to rect() will be interpreted according to the provided mode.",2,{"inputs":[{"name":"self"},{"name":"rectmode"}],"output":null}],[11,"point","","draws pixel-sized point at the provided coordinates",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"rect","","draws a rectangle",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"line","","draws a line",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"polygon","","draws a polygon",2,null],[11,"triangle","","draws a triangle",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"quad","","draws a quad",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"arc","","draws arc (NOT COMPLETE)",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"pie","","draws a pie (NOT COMPLETE)",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"circle","","draws a circle",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":null}],[11,"ellipse","","draws an ellipse",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"image","","displays an image at the given position (x,y) and size (w,h)",2,{"inputs":[{"name":"self"},{"name":"image"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":null}]],"paths":[[4,"RectMode"],[8,"MainLoopMethods"],[3,"Sketch"]]};
initSearch(searchIndex);
