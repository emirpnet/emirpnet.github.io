var searchIndex={};
searchIndex["sdl2sketch"] = {"doc":"SDL2Sketch for Rust tries to simplify the use of rust-sdl2…","i":[[3,"Sketch","sdl2sketch","This struct contains the necessary SDL2 subsystem objects…",null,null],[4,"AngleMode","","options for the interpretation of angle parameters",null,null],[13,"RADIANS","","RADIANS (default): angles are interpreted as radians",0,null],[13,"DEGREES","","DEGREES: angles are interpreted as degrees",0,null],[4,"RectMode","","options for the interpretation of the parameters given to…",null,null],[13,"CORNER","","CORNER (default): coordinates of the upper left corner (x,…",1,null],[13,"CORNERS","","CORNERS: coordinates of the upper left corner (x, y) and…",1,null],[13,"CENTER","","CENTER: coordinates of the center (x, y), width (w) and…",1,null],[13,"RADIUS","","RADIUS: coordinates of the center (x, y), half width (w)…",1,null],[4,"ImageMode","","options for the interpretation of the parameters given to…",null,null],[13,"CORNER","","CORNER (default): coordinates of the upper left corner (x,…",2,null],[13,"CORNERS","","CORNERS: coordinates of the upper left corner (x, y) and…",2,null],[13,"CENTER","","CENTER: coordinates of the center (x, y), width (w) and…",2,null],[5,"run","","starts the sketch and runs the main loop",null,[[["t"],["sketch"]]]],[0,"utils","","module containing utility functions",null,null],[5,"constrain","sdl2sketch::utils","utility function to constrain a value between low and high",null,[[["partialord"]],["partialord"]]],[5,"map","","utility function to map a Float from one value range to…",null,[[["float"]],["float"]]],[5,"norm","","utility function to map a Float from one value range to…",null,[[["float"]],["float"]]],[5,"rad_to_deg","","utility function to convert angles from radians to degrees",null,[[["f32"]],["f32"]]],[5,"deg_to_rad","","utility function to convert angles from degrees to radians",null,[[["f32"]],["f32"]]],[5,"hsv_to_rgb","","utility function to convert a HSV color value to RGB…",null,[[["u16"],["f32"]]]],[5,"rgb_to_hsv","","utility function to convert a RGB color value to HSV…",null,[[["u8"]]]],[8,"MainLoopMethods","sdl2sketch","This trait must be implemented by the state struct of the…",null,null],[11,"setup","","called once before entering the main loop",3,[[["self"],["sketch"]]]],[11,"update","","called every frame inside the main loop before draw()",3,[[["self"],["sketch"]]]],[11,"draw","","called every frame inside the main loop",3,[[["self"],["sketch"]]]],[11,"key_pressed","","called inside the main loop on a KeyDown event",3,[[["self"],["keycode"],["sketch"]]]],[11,"key_released","","called inside the main loop on a KeyUp event",3,[[["self"],["keycode"],["sketch"]]]],[11,"mouse_moved","","called inside the main loop on a MouseMotion event, if no…",3,[[["i32"],["sketch"],["self"]]]],[11,"mouse_dragged","","called inside the main loop on a MouseMotion event, if a…",3,[[["i32"],["sketch"],["self"]]]],[11,"mouse_pressed","","called inside the main loop on a MouseButtonDown event",3,[[["mousebutton"],["sketch"],["i32"],["self"]]]],[11,"mouse_released","","called inside the main loop on a MouseButtonUp event",3,[[["mousebutton"],["sketch"],["i32"],["self"]]]],[11,"new","","create a new sketch",4,[[["str"],["u32"]],["self"]]],[11,"width","","returns the width of the sketch in pixels",4,[[["self"]],["i32"]]],[11,"height","","returns the height of the sketch in pixels",4,[[["self"]],["i32"]]],[11,"get_framerate","","returns the current framerate in frames per second",4,[[["self"]],["f32"]]],[11,"set_framerate","","sets the max. framerate in frames per second",4,[[["self"],["u32"]]]],[11,"no_loop","","stops and restarts the main loop",4,[[["self"],["bool"]]]],[11,"quit","","exits the main loop",4,[[["self"]]]],[11,"background","","clears the sketch by filling the whole sketch with the…",4,[[["self"],["color"]]]],[11,"key_is_down","","checks if the key with the provided keycode is currently…",4,[[["keycode"],["self"]],["bool"]]],[11,"mouse_pos","","returns current x position of the mouse in pixel coordinates",4,[[["self"]]]],[11,"mouse_is_pressed","","checks if any mouse button is currently pressed",4,[[["self"]],["bool"]]],[11,"stroke","","After calling this function primitives will be drawn with…",4,[[["self"],["color"]]]],[11,"no_stroke","","After calling this function primitives will be drawn…",4,[[["self"]]]],[11,"fill","","After calling this function primitives will be drawn…",4,[[["self"],["color"]]]],[11,"no_fill","","After calling this function primitives will be drawn…",4,[[["self"]]]],[11,"smooth","","After calling this function primitives will be drawn with…",4,[[["self"]]]],[11,"no_smooth","","After calling this function primitives will be drawn…",4,[[["self"]]]],[11,"angle_mode","","After calling this function angle parameters of all…",4,[[["anglemode"],["self"]]]],[11,"rect_mode","","After calling this function the parameters of all…",4,[[["self"],["rectmode"]]]],[11,"image_mode","","After calling this function the parameters of all…",4,[[["imagemode"],["self"]]]],[11,"point","","draws pixel-sized point at the provided coordinates",4,[[["self"],["i32"]]]],[11,"rect","","draws a rectangle",4,[[["u32"],["i32"],["self"]]]],[11,"line","","draws a line",4,[[["self"],["i32"]]]],[11,"polygon","","draws a polygon",4,[[["self"]]]],[11,"triangle","","draws a triangle",4,[[["self"],["i32"]]]],[11,"quad","","draws a quad",4,[[["self"],["i32"]]]],[11,"arc","","draws arc (NOT COMPLETE)",4,[[["f32"],["u32"],["i32"],["self"]]]],[11,"pie","","draws a pie",4,[[["f32"],["u32"],["i32"],["self"]]]],[11,"circle","","draws a circle",4,[[["self"],["u32"],["i32"]]]],[11,"ellipse","","draws an ellipse",4,[[["u32"],["i32"],["self"]]]],[11,"load_image","","loads an image from file (PNG or JPG)",4,[[["self"],["path"]],["image"]]],[11,"image","","displays an image at position (x,y) in size (w,h)",4,[[["u32"],["image"],["i32"],["self"]]]],[11,"image_part","","displays part of an image defined by (sx, sy, sw, sh) at…",4,[[["u32"],["image"],["i32"],["self"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"eq","","",0,[[["anglemode"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["rectmode"]],["bool"]]],[11,"eq","","",2,[[["imagemode"],["self"]],["bool"]]]],"p":[[4,"AngleMode"],[4,"RectMode"],[4,"ImageMode"],[8,"MainLoopMethods"],[3,"Sketch"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);